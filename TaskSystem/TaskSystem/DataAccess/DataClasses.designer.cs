#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskSystem.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbc23b1bbe25304f95bd0da33400cd3072")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertAccessory(Accessory instance);
    partial void UpdateAccessory(Accessory instance);
    partial void DeleteAccessory(Accessory instance);
    partial void InsertAssignment(Assignment instance);
    partial void UpdateAssignment(Assignment instance);
    partial void DeleteAssignment(Assignment instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertProblem(Problem instance);
    partial void UpdateProblem(Problem instance);
    partial void DeleteProblem(Problem instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudent_Course(Student_Course instance);
    partial void UpdateStudent_Course(Student_Course instance);
    partial void DeleteStudent_Course(Student_Course instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbc23b1bbe25304f95bd0da33400cd3072ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admin
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Accessory> Accessory
		{
			get
			{
				return this.GetTable<Accessory>();
			}
		}
		
		public System.Data.Linq.Table<Assignment> Assignment
		{
			get
			{
				return this.GetTable<Assignment>();
			}
		}
		
		public System.Data.Linq.Table<Course> Course
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Problem> Problem
		{
			get
			{
				return this.GetTable<Problem>();
			}
		}
		
		public System.Data.Linq.Table<Student> Student
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Student_Course> Student_Course
		{
			get
			{
				return this.GetTable<Student_Course>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teacher
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answer
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _passwd;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswdChanging(string value);
    partial void OnpasswdChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwd", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string passwd
		{
			get
			{
				return this._passwd;
			}
			set
			{
				if ((this._passwd != value))
				{
					this.OnpasswdChanging(value);
					this.SendPropertyChanging();
					this._passwd = value;
					this.SendPropertyChanged("passwd");
					this.OnpasswdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accessory")]
	public partial class Accessory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student;
		
		private int _assignment;
		
		private string _adress;
		
		private EntityRef<Assignment> _Assignment1;
		
		private EntityRef<Student> _Student1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentChanging(string value);
    partial void OnstudentChanged();
    partial void OnassignmentChanging(int value);
    partial void OnassignmentChanged();
    partial void OnadressChanging(string value);
    partial void OnadressChanged();
    #endregion
		
		public Accessory()
		{
			this._Assignment1 = default(EntityRef<Assignment>);
			this._Student1 = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string student
		{
			get
			{
				return this._student;
			}
			set
			{
				if ((this._student != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentChanging(value);
					this.SendPropertyChanging();
					this._student = value;
					this.SendPropertyChanged("student");
					this.OnstudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int assignment
		{
			get
			{
				return this._assignment;
			}
			set
			{
				if ((this._assignment != value))
				{
					if (this._Assignment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassignmentChanging(value);
					this.SendPropertyChanging();
					this._assignment = value;
					this.SendPropertyChanged("assignment");
					this.OnassignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adress", DbType="NVarChar(256)")]
		public string adress
		{
			get
			{
				return this._adress;
			}
			set
			{
				if ((this._adress != value))
				{
					this.OnadressChanging(value);
					this.SendPropertyChanging();
					this._adress = value;
					this.SendPropertyChanged("adress");
					this.OnadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Accessory", Storage="_Assignment1", ThisKey="assignment", OtherKey="id", IsForeignKey=true)]
		public Assignment Assignment1
		{
			get
			{
				return this._Assignment1.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment1.Entity;
				if (((previousValue != value) 
							|| (this._Assignment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment1.Entity = null;
						previousValue.Accessory.Remove(this);
					}
					this._Assignment1.Entity = value;
					if ((value != null))
					{
						value.Accessory.Add(this);
						this._assignment = value.id;
					}
					else
					{
						this._assignment = default(int);
					}
					this.SendPropertyChanged("Assignment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Accessory", Storage="_Student1", ThisKey="student", OtherKey="username", IsForeignKey=true)]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.Accessory.Remove(this);
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.Accessory.Add(this);
						this._student = value.username;
					}
					else
					{
						this._student = default(string);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assignment")]
	public partial class Assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _course;
		
		private string _title;
		
		private string _descrip;
		
		private System.Nullable<System.DateTime> _start_time;
		
		private System.Nullable<System.DateTime> _end_time;
		
		private string _major;
		
		private System.Nullable<int> _number;
		
		private EntitySet<Accessory> _Accessory;
		
		private EntitySet<Problem> _Problem;
		
		private EntityRef<Course> _Course1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncourseChanging(string value);
    partial void OncourseChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescripChanging(string value);
    partial void OndescripChanged();
    partial void Onstart_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_timeChanged();
    partial void Onend_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onend_timeChanged();
    partial void OnmajorChanging(string value);
    partial void OnmajorChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    #endregion
		
		public Assignment()
		{
			this._Accessory = new EntitySet<Accessory>(new Action<Accessory>(this.attach_Accessory), new Action<Accessory>(this.detach_Accessory));
			this._Problem = new EntitySet<Problem>(new Action<Problem>(this.attach_Problem), new Action<Problem>(this.detach_Problem));
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string course
		{
			get
			{
				return this._course;
			}
			set
			{
				if ((this._course != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseChanging(value);
					this.SendPropertyChanging();
					this._course = value;
					this.SendPropertyChanged("course");
					this.OncourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(100)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrip", DbType="NVarChar(1024)")]
		public string descrip
		{
			get
			{
				return this._descrip;
			}
			set
			{
				if ((this._descrip != value))
				{
					this.OndescripChanging(value);
					this.SendPropertyChanging();
					this._descrip = value;
					this.SendPropertyChanged("descrip");
					this.OndescripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_time", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> start_time
		{
			get
			{
				return this._start_time;
			}
			set
			{
				if ((this._start_time != value))
				{
					this.Onstart_timeChanging(value);
					this.SendPropertyChanging();
					this._start_time = value;
					this.SendPropertyChanged("start_time");
					this.Onstart_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_time", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> end_time
		{
			get
			{
				return this._end_time;
			}
			set
			{
				if ((this._end_time != value))
				{
					this.Onend_timeChanging(value);
					this.SendPropertyChanging();
					this._end_time = value;
					this.SendPropertyChanged("end_time");
					this.Onend_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_major", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Accessory", Storage="_Accessory", ThisKey="id", OtherKey="assignment")]
		public EntitySet<Accessory> Accessory
		{
			get
			{
				return this._Accessory;
			}
			set
			{
				this._Accessory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Problem", Storage="_Problem", ThisKey="id", OtherKey="assignment")]
		public EntitySet<Problem> Problem
		{
			get
			{
				return this._Problem;
			}
			set
			{
				this._Problem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Assignment", Storage="_Course1", ThisKey="course", OtherKey="num", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Assignment.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Assignment.Add(this);
						this._course = value.num;
					}
					else
					{
						this._course = default(string);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accessory(Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Assignment1 = this;
		}
		
		private void detach_Accessory(Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Assignment1 = null;
		}
		
		private void attach_Problem(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Assignment1 = this;
		}
		
		private void detach_Problem(Problem entity)
		{
			this.SendPropertyChanging();
			entity.Assignment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _num;
		
		private string _teacher;
		
		private string _name;
		
		private System.Nullable<System.DateTime> _start_time;
		
		private System.Nullable<System.DateTime> _end_time;
		
		private EntitySet<Assignment> _Assignment;
		
		private EntitySet<Student_Course> _Student_Course;
		
		private EntityRef<Teacher> _Teacher1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumChanging(string value);
    partial void OnnumChanged();
    partial void OnteacherChanging(string value);
    partial void OnteacherChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onstart_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onstart_timeChanged();
    partial void Onend_timeChanging(System.Nullable<System.DateTime> value);
    partial void Onend_timeChanged();
    #endregion
		
		public Course()
		{
			this._Assignment = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignment), new Action<Assignment>(this.detach_Assignment));
			this._Student_Course = new EntitySet<Student_Course>(new Action<Student_Course>(this.attach_Student_Course), new Action<Student_Course>(this.detach_Student_Course));
			this._Teacher1 = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_num", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string num
		{
			get
			{
				return this._num;
			}
			set
			{
				if ((this._num != value))
				{
					this.OnnumChanging(value);
					this.SendPropertyChanging();
					this._num = value;
					this.SendPropertyChanged("num");
					this.OnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacher", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string teacher
		{
			get
			{
				return this._teacher;
			}
			set
			{
				if ((this._teacher != value))
				{
					if (this._Teacher1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherChanging(value);
					this.SendPropertyChanging();
					this._teacher = value;
					this.SendPropertyChanged("teacher");
					this.OnteacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_start_time", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> start_time
		{
			get
			{
				return this._start_time;
			}
			set
			{
				if ((this._start_time != value))
				{
					this.Onstart_timeChanging(value);
					this.SendPropertyChanging();
					this._start_time = value;
					this.SendPropertyChanged("start_time");
					this.Onstart_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_time", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> end_time
		{
			get
			{
				return this._end_time;
			}
			set
			{
				if ((this._end_time != value))
				{
					this.Onend_timeChanging(value);
					this.SendPropertyChanging();
					this._end_time = value;
					this.SendPropertyChanged("end_time");
					this.Onend_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Assignment", Storage="_Assignment", ThisKey="num", OtherKey="course")]
		public EntitySet<Assignment> Assignment
		{
			get
			{
				return this._Assignment;
			}
			set
			{
				this._Assignment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student_Course", Storage="_Student_Course", ThisKey="num", OtherKey="course")]
		public EntitySet<Student_Course> Student_Course
		{
			get
			{
				return this._Student_Course;
			}
			set
			{
				this._Student_Course.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Course", Storage="_Teacher1", ThisKey="teacher", OtherKey="username", IsForeignKey=true)]
		public Teacher Teacher1
		{
			get
			{
				return this._Teacher1.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher1.Entity;
				if (((previousValue != value) 
							|| (this._Teacher1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher1.Entity = null;
						previousValue.Course.Remove(this);
					}
					this._Teacher1.Entity = value;
					if ((value != null))
					{
						value.Course.Add(this);
						this._teacher = value.username;
					}
					else
					{
						this._teacher = default(string);
					}
					this.SendPropertyChanged("Teacher1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignment(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Assignment(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_Student_Course(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Student_Course(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Problem")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _assignment;
		
		private string _title;
		
		private string _descrip;
		
		private System.Nullable<float> _score;
		
		private EntitySet<Answer> _Answer;
		
		private EntityRef<Assignment> _Assignment1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnassignmentChanging(int value);
    partial void OnassignmentChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescripChanging(string value);
    partial void OndescripChanged();
    partial void OnscoreChanging(System.Nullable<float> value);
    partial void OnscoreChanged();
    #endregion
		
		public Problem()
		{
			this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
			this._Assignment1 = default(EntityRef<Assignment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignment", DbType="Int NOT NULL")]
		public int assignment
		{
			get
			{
				return this._assignment;
			}
			set
			{
				if ((this._assignment != value))
				{
					if (this._Assignment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassignmentChanging(value);
					this.SendPropertyChanging();
					this._assignment = value;
					this.SendPropertyChanged("assignment");
					this.OnassignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(100)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrip", DbType="NVarChar(1024)")]
		public string descrip
		{
			get
			{
				return this._descrip;
			}
			set
			{
				if ((this._descrip != value))
				{
					this.OndescripChanging(value);
					this.SendPropertyChanging();
					this._descrip = value;
					this.SendPropertyChanged("descrip");
					this.OndescripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Real")]
		public System.Nullable<float> score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Answer", Storage="_Answer", ThisKey="id", OtherKey="problem")]
		public EntitySet<Answer> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				this._Answer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Problem", Storage="_Assignment1", ThisKey="assignment", OtherKey="id", IsForeignKey=true)]
		public Assignment Assignment1
		{
			get
			{
				return this._Assignment1.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment1.Entity;
				if (((previousValue != value) 
							|| (this._Assignment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment1.Entity = null;
						previousValue.Problem.Remove(this);
					}
					this._Assignment1.Entity = value;
					if ((value != null))
					{
						value.Problem.Add(this);
						this._assignment = value.id;
					}
					else
					{
						this._assignment = default(int);
					}
					this.SendPropertyChanged("Assignment1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Problem1 = this;
		}
		
		private void detach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Problem1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _passwd;
		
		private string _name;
		
		private string _major;
		
		private EntitySet<Accessory> _Accessory;
		
		private EntitySet<Student_Course> _Student_Course;
		
		private EntitySet<Answer> _Answer;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswdChanging(string value);
    partial void OnpasswdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmajorChanging(string value);
    partial void OnmajorChanged();
    #endregion
		
		public Student()
		{
			this._Accessory = new EntitySet<Accessory>(new Action<Accessory>(this.attach_Accessory), new Action<Accessory>(this.detach_Accessory));
			this._Student_Course = new EntitySet<Student_Course>(new Action<Student_Course>(this.attach_Student_Course), new Action<Student_Course>(this.detach_Student_Course));
			this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwd", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string passwd
		{
			get
			{
				return this._passwd;
			}
			set
			{
				if ((this._passwd != value))
				{
					this.OnpasswdChanging(value);
					this.SendPropertyChanging();
					this._passwd = value;
					this.SendPropertyChanged("passwd");
					this.OnpasswdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_major", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Accessory", Storage="_Accessory", ThisKey="username", OtherKey="student")]
		public EntitySet<Accessory> Accessory
		{
			get
			{
				return this._Accessory;
			}
			set
			{
				this._Accessory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Course", Storage="_Student_Course", ThisKey="username", OtherKey="student")]
		public EntitySet<Student_Course> Student_Course
		{
			get
			{
				return this._Student_Course;
			}
			set
			{
				this._Student_Course.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Answer", Storage="_Answer", ThisKey="username", OtherKey="student")]
		public EntitySet<Answer> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				this._Answer.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accessory(Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = this;
		}
		
		private void detach_Accessory(Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = null;
		}
		
		private void attach_Student_Course(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = this;
		}
		
		private void detach_Student_Course(Student_Course entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = null;
		}
		
		private void attach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = this;
		}
		
		private void detach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Student1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_Course")]
	public partial class Student_Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student;
		
		private string _course;
		
		private EntityRef<Course> _Course1;
		
		private EntityRef<Student> _Student1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentChanging(string value);
    partial void OnstudentChanged();
    partial void OncourseChanging(string value);
    partial void OncourseChanged();
    #endregion
		
		public Student_Course()
		{
			this._Course1 = default(EntityRef<Course>);
			this._Student1 = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string student
		{
			get
			{
				return this._student;
			}
			set
			{
				if ((this._student != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentChanging(value);
					this.SendPropertyChanging();
					this._student = value;
					this.SendPropertyChanged("student");
					this.OnstudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_course", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string course
		{
			get
			{
				return this._course;
			}
			set
			{
				if ((this._course != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseChanging(value);
					this.SendPropertyChanging();
					this._course = value;
					this.SendPropertyChanged("course");
					this.OncourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student_Course", Storage="_Course1", ThisKey="course", OtherKey="num", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Student_Course.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Student_Course.Add(this);
						this._course = value.num;
					}
					else
					{
						this._course = default(string);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Course", Storage="_Student1", ThisKey="student", OtherKey="username", IsForeignKey=true)]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.Student_Course.Remove(this);
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.Student_Course.Add(this);
						this._student = value.username;
					}
					else
					{
						this._student = default(string);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _passwd;
		
		private string _name;
		
		private EntitySet<Course> _Course;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswdChanging(string value);
    partial void OnpasswdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Teacher()
		{
			this._Course = new EntitySet<Course>(new Action<Course>(this.attach_Course), new Action<Course>(this.detach_Course));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwd", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string passwd
		{
			get
			{
				return this._passwd;
			}
			set
			{
				if ((this._passwd != value))
				{
					this.OnpasswdChanging(value);
					this.SendPropertyChanging();
					this._passwd = value;
					this.SendPropertyChanged("passwd");
					this.OnpasswdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Course", Storage="_Course", ThisKey="username", OtherKey="teacher")]
		public EntitySet<Course> Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				this._Course.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.Teacher1 = this;
		}
		
		private void detach_Course(Course entity)
		{
			this.SendPropertyChanging();
			entity.Teacher1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student;
		
		private int _problem;
		
		private string _content;
		
		private System.Nullable<float> _score;
		
		private string _comment;
		
		private string _major;
		
		private string _state;
		
		private EntityRef<Problem> _Problem1;
		
		private EntityRef<Student> _Student1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentChanging(string value);
    partial void OnstudentChanged();
    partial void OnproblemChanging(int value);
    partial void OnproblemChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OnscoreChanging(System.Nullable<float> value);
    partial void OnscoreChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OnmajorChanging(string value);
    partial void OnmajorChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    #endregion
		
		public Answer()
		{
			this._Problem1 = default(EntityRef<Problem>);
			this._Student1 = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string student
		{
			get
			{
				return this._student;
			}
			set
			{
				if ((this._student != value))
				{
					if (this._Student1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentChanging(value);
					this.SendPropertyChanging();
					this._student = value;
					this.SendPropertyChanged("student");
					this.OnstudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_problem", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int problem
		{
			get
			{
				return this._problem;
			}
			set
			{
				if ((this._problem != value))
				{
					if (this._Problem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproblemChanging(value);
					this.SendPropertyChanging();
					this._problem = value;
					this.SendPropertyChanged("problem");
					this.OnproblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(4000)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Real")]
		public System.Nullable<float> score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(1024)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_major", DbType="NVarChar(50)")]
		public string major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(50)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Answer", Storage="_Problem1", ThisKey="problem", OtherKey="id", IsForeignKey=true)]
		public Problem Problem1
		{
			get
			{
				return this._Problem1.Entity;
			}
			set
			{
				Problem previousValue = this._Problem1.Entity;
				if (((previousValue != value) 
							|| (this._Problem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem1.Entity = null;
						previousValue.Answer.Remove(this);
					}
					this._Problem1.Entity = value;
					if ((value != null))
					{
						value.Answer.Add(this);
						this._problem = value.id;
					}
					else
					{
						this._problem = default(int);
					}
					this.SendPropertyChanged("Problem1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Answer", Storage="_Student1", ThisKey="student", OtherKey="username", IsForeignKey=true)]
		public Student Student1
		{
			get
			{
				return this._Student1.Entity;
			}
			set
			{
				Student previousValue = this._Student1.Entity;
				if (((previousValue != value) 
							|| (this._Student1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student1.Entity = null;
						previousValue.Answer.Remove(this);
					}
					this._Student1.Entity = value;
					if ((value != null))
					{
						value.Answer.Add(this);
						this._student = value.username;
					}
					else
					{
						this._student = default(string);
					}
					this.SendPropertyChanged("Student1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
